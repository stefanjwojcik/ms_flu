pw_encode("github")
pw_encode("pewresearch6")
pw_encode("pewresearch7")
install.packages(ca)
install.packages("ca")
library(ca)
methods(ca)
methods(ca)$ca.matrix
methods(ca)[1]
ca.ca.data.frame
?ca
ca
showMethods(ca)
getMethod("ca", "ca.table")
getMethod("ca.table", "ca")
getMethod("ca", "ca.table")
showMethods("Ca")
showMethods("aa")
showMethods("ca")
methods(ca)
?methods
print(ca)
methods("ca")
print(methods("ca"))
print(ca.table)
ca.table
print(methods("ca.table"))
getAnywhere(ca.matrix)
getAnywhere(ca.table)
getAnywhere(ca.matrix)
getAnywhere(ca.xtab)
cav2 <- function (obj, nd = NA, suprow = NA, supcol = NA, subsetrow = NA,
subsetcol = NA, ...) {
nd0 <- nd
I <- dim(obj)[1]
J <- dim(obj)[2]
rn <- dimnames(obj)[[1]]
cn <- dimnames(obj)[[2]]
N <- matrix(as.matrix(obj), nrow = I, ncol = J)
Ntemp <- N
NtempC <- NtempR <- N
suprow <- sort(suprow)
supcol <- sort(supcol)
if (!is.na(supcol[1]) & !is.na(suprow[1])) {
NtempC <- Ntemp[-suprow, ]
NtempR <- Ntemp[, -supcol]
}
if (!is.na(supcol[1])) {
SC <- as.matrix(NtempC[, supcol])
Ntemp <- Ntemp[, -supcol]
cs.sum <- apply(SC, 2, sum)
}
if (!is.na(suprow[1])) {
SR <- matrix(as.matrix(NtempR[suprow, ]), nrow = length(suprow))
Ntemp <- Ntemp[-suprow, ]
rs.sum <- apply(SR, 1, sum)
}
N <- matrix(as.matrix(Ntemp), nrow = dim(Ntemp)[1], ncol = dim(Ntemp)[2])
subsetrowt <- subsetrow
if (!is.na(subsetrow[1]) & !is.na(suprow[1])) {
subsetrowi <- subsetrow
subsetrowt <- sort(c(subsetrow, suprow))
subsetrowt <- subsetrowt[!duplicated(subsetrowt)]
I <- length(subsetrowt)
for (q in length(suprow):1) {
subsetrow <- subsetrow[subsetrow != suprow[q]]
subsetrow <- subsetrow - as.numeric(suprow[q] < subsetrow)
}
for (q in 1:length(suprow)) suprow[q] <- (1:length(subsetrowt))[subsetrowt ==
suprow[q]]
}
subsetcolt <- subsetcol
if (!is.na(subsetcol[1]) & !is.na(supcol[1])) {
subsetcoli <- subsetcol
subsetcolt <- sort(c(subsetcol, supcol))
subsetcolt <- subsetcolt[!duplicated(subsetcolt)]
J <- length(subsetcolt)
for (q in length(supcol):1) {
subsetcol <- subsetcol[subsetcol != supcol[q]]
subsetcol <- subsetcol - as.numeric(supcol[q] < subsetcol)
}
for (q in 1:length(supcol)) supcol[q] <- (1:length(subsetcolt))[subsetcolt ==
supcol[q]]
}
dim.N <- dim(N)
if (!is.na(subsetrow[1])) {
if (!is.na(supcol[1]))
SC <- as.matrix(SC[subsetrow, ])
}
if (!is.na(subsetcol[1])) {
if (!is.na(suprow[1]))
SR <- matrix(as.matrix(SR[, subsetcol]), nrow = length(suprow))
}
if (is.na(subsetrow[1]) & is.na(subsetcol[1])) {
nd.max <- min(dim.N) - 1
}
else {
N00 <- N
if (!is.na(subsetrow[1]))
N00 <- N00[subsetrow, ]
if (!is.na(subsetcol[1]))
N00 <- N00[, subsetcol]
dim.N <- dim(N00)
nd.max <- min(dim.N)
if (!is.na(subsetrow[1]) & is.na(subsetcol[1])) {
if (dim.N[1] > dim.N[2])
nd.max <- min(dim.N) - 1
}
else {
if (is.na(subsetrow[1]) & !is.na(subsetcol[1])) {
if (dim.N[2] > dim.N[1]) {
nd.max <- min(dim.N) - 1
}
}
}
}
if (is.na(nd) | nd > nd.max)
nd <- nd.max
n <- sum(N)
P <- N/n
rm <- apply(P, 1, sum)
cm <- apply(P, 2, sum)
eP <- rm %*% t(cm)
eN <- eP * n
S <- (P - eP)/sqrt(eP)
if (!is.na(subsetcol[1])) {
S <- S[, subsetcol]
cm <- cm[subsetcol]
cn <- cn[subsetcolt]
}
if (!is.na(subsetrow[1])) {
S <- S[subsetrow, ]
rm <- rm[subsetrow]
rn <- rn[subsetrowt]
}
chimat <- S^2 * n
dec <- svd(S)
sv <- dec$d[1:nd.max]
u <- dec$u
v <- dec$v
ev <- sv^2
cumev <- cumsum(ev)
totin <- sum(ev)
rin <- apply(S^2, 1, sum)
cin <- apply(S^2, 2, sum)
rachidist <- sqrt(rin/rm)
cachidist <- sqrt(cin/cm)
rchidist <- rep(NA, I)
cchidist <- rep(NA, J)
if (!is.na(subsetrow[1])) {
obj <- obj[subsetrowt, ]
}
if (!is.na(subsetcol[1])) {
obj <- obj[, subsetcolt]
}
if (!is.na(suprow[1])) {
if (is.na(supcol[1])) {
P.stemp <- matrix(as.matrix(obj[suprow, ]), nrow = length(suprow))
}
else {
P.stemp <- matrix(as.matrix(obj[suprow, -supcol]),
nrow = length(suprow))
}
P.stemp <- P.stemp/apply(P.stemp, 1, sum)
P.stemp <- t((t(P.stemp) - cm)/sqrt(cm))
rschidist <- sqrt(apply(P.stemp^2, 1, sum))
rchidist[-suprow] <- rachidist
rchidist[suprow] <- rschidist
}
else rchidist <- rachidist
if (!is.na(supcol[1])) {
if (is.na(suprow[1])) {
P.stemp <- as.matrix(obj[, supcol])
}
else {
P.stemp <- as.matrix(obj[-suprow, supcol])
}
P.stemp <- t(t(P.stemp)/apply(P.stemp, 2, sum))
P.stemp <- (P.stemp - rm)/sqrt(rm)
cschidist <- sqrt(apply(P.stemp^2, 2, sum))
cchidist[-supcol] <- cachidist
cchidist[supcol] <- cschidist
}
else {
cchidist <- cachidist
}
phi <- as.matrix(u[, 1:nd])/sqrt(rm)
gam <- as.matrix(v[, 1:nd])/sqrt(cm)
if (!is.na(suprow[1])) {
cs <- cm
gam.00 <- gam
base2 <- SR/matrix(rs.sum, nrow = nrow(SR), ncol = ncol(SR))
base2 <- t(base2)
cs.0 <- matrix(cs, nrow = nrow(base2), ncol = ncol(base2))
svphi <- matrix(sv[1:nd], nrow = length(suprow), ncol = nd,
byrow = TRUE)
base2 <- base2 - cs.0
phi2 <- (t(as.matrix(base2)) %*% gam.00)/svphi
phi3 <- matrix(NA, ncol = nd, nrow = I)
phi3[suprow, ] <- phi2
phi3[-suprow, ] <- phi
rm0 <- rep(NA, I)
rm0[-suprow] <- rm
P.star <- SR/n
rm0[suprow] <- NA
rin0 <- rep(NA, I)
rin0[-suprow] <- rin
rin <- rin0
rm.old <- rm
rm <- rm0
}
if (!is.na(supcol[1])) {
if (!is.na(suprow[1])) {
rs <- rm.old
}
else {
rs <- rm
}
phi.00 <- phi
base2 <- SC/matrix(cs.sum, nrow = nrow(SC), ncol = ncol(SC),
byrow = TRUE)
rs.0 <- matrix(rs, nrow = nrow(base2), ncol = ncol(base2))
svgam <- matrix(sv[1:nd], nrow = length(supcol), ncol = nd,
byrow = TRUE)
base2 <- base2 - rs.0
gam2 <- (as.matrix(t(base2)) %*% phi.00)/svgam
gam3 <- matrix(NA, ncol = nd, nrow = J)
gam3[supcol, ] <- gam2
gam3[-supcol, ] <- gam
cm0 <- rep(NA, J)
cm0[-supcol] <- cm
P.star <- SC/n
cm0[supcol] <- NA
cin0 <- rep(NA, J)
cin0[-supcol] <- cin
cin <- cin0
cm <- cm0
}
if (exists("phi3")) {
phi <- phi3
}
if (exists("gam3")) {
gam <- gam3
}
dims <- paste0("Dim", seq_along(sv))[1:nd]
dimnames(phi) <- list(rn, dims)
dimnames(gam) <- list(cn, dims)
ca.output <- list(sv = sv, nd = nd0, rownames = rn, rowmass = rm,
rowdist = rchidist, rowinertia = rin, rowcoord = phi,
rowsup = suprow, colnames = cn, colmass = cm, coldist = cchidist,
colinertia = cin, colcoord = gam, colsup = supcol, N = N,
call = match.call())
class(ca.output) <- "ca"
return(ca.output)
}
HairEyeColor
?ca
margin.table(HairEyeColor, 1:2)
?margin.table
25*25
haireye <- margin.table(HairEyeColor, 1:2)
haireye
class(haireye)
cav2(haireye)
obj <- haireye
obj
nd0 <- nd
nd = NA; suprow = NA; supcol = NA; subsetrow = NA;
subsetcol = NA
bd
nd
nd0 <- nd
I <- dim(obj)[1]
J <- dim(obj)[2]
rn <- dimnames(obj)[[1]]
cn <- dimnames(obj)[[2]]
N <- matrix(as.matrix(obj), nrow = I, ncol = J)
N
obj
Ntemp <- N
NtempC <- NtempR <- N
suprow <- sort(suprow)
N
Ntemp
NtempR
suprow <- sort(suprow)
supcol <- sort(supcol)
suprow
supcol
!is.na(supcol[1])
subsetcol
subsetcolt
dim.N
dim(N)
dim.N <- dim(N)
dim
dim.N
N00 <- N
dim.N[2] > dim.N[1]
nd.max <- min(dim.N) - 1
nd.max
nd
md.max
nd.max
nd <- nd.max
n <- sum(N)
P <- N/n
rm <- apply(P, 1, sum)
cm <- apply(P, 2, sum)
eP <- rm %*% t(cm)
eN <- eP * n
S <- (P - eP)/sqrt(eP)
4*17.7
4*17.5
70*4
100/(100+180)
7000*.357
5320-2499
2*25
25*25
5275/48
720/60
949*4
library(ggplot2)
library(stargazer)
library(effects)
library(Zelig)
library(noncensus)
library(texreg)
library(dplyr)
library(tidytext)
library(SnowballC)
library(data.table)
library(irr)
d1 = readRDS("~/Documents/ms_flu/data/main_flu_dat.rds")
mod_names = names(d1)
nice_names = c("A1", "A2", "B1", "B2", "Any.Flu.Term", "Search.Volume",
"Female", "Parent", "Spouse", "Age", "Household.Flu",
"Respondent.Flu", "Spouse.Flu", "Child.Flu", "Primary.User",
"Education", "Race", "Early.Response", "info_source")
names(d1) = nice_names
table(d1$A1, d1$Household.Flu)
d1 %>% group_by(Household.Flu) %>% summarise(mean(A1))
d1 %>% group_by(A1) %>% summarise(mean(Household.Flu))
d1$A2[which(d1$A1==1 & d1$A2==1)] = NA
table(d1$A2, d1$Household.Flu)
d1 %>% group_by(Household.Flu) %>% summarise(mean(A2, na.rm=T))
d1 %>% group_by(A2) %>% summarise(mean(Household.Flu))
tau = readRDS("~/Documents/ms_flu/data/tau.rds")
tau = tau$numer/tau$denom
fixTau = function(yhat, tau){
log( ( (1 - tau) / tau) * (yhat / (1 - yhat) ) )
}
names(d1) = mod_names
ma1 <- zelig(a1~household.flu+volume+female+parent+age, model="relogit", tau=tau, data=d1)
ma2 <- zelig(a1~ch.flu+volume+female+age, model="relogit", tau=tau, data=d1)
ma3 <- zelig(a1~r.flu+volume+female+parent+age, model="relogit", tau=tau, data=d1)
ma4 <- zelig(a1~s.flu+volume+female+age, model="relogit", tau=tau, data=d1) #
texreg(c(ma1, ma2, ma3, ma4))
ma12 <- zelig(a2~household.flu+volume+female+parent+age, model="relogit", tau=tau, data=d1)
ma22 <- zelig(a2~ch.flu+volume+female+age, model="relogit", tau=tau, data=d1)
ma32 <- zelig(a2~r.flu+volume+female+parent+age, model="relogit", tau=tau, data=d1)
ma42 <- zelig(a2~s.flu+volume+female+age, model="relogit", tau=tau, data=d1) #
texreg(c(ma12, ma22, ma32, ma42))
ma5 <- zelig(a1~household.flu+education+race, model="relogit", tau=tau, data=d1)
ma6a <- zelig(household.flu~volume+female+parent+age+early_response, model = "logit", data=d1)
ma6b <- zelig(r.flu~volume+female+parent+age+early_response, model = "logit", data=d1)
ma6c <- zelig(s.flu~volume+female+parent+age+early_response, model = "logit", data=d1)
texreg(c(ma6a, ma6b, ma6c))
ma_healh <- zelig(info_from_provider ~ a1, model = "logit", data=d1)
table(d1$a1, d1$info_from_provider)
names(d1)
ma_healh <- zelig(info_source ~ a1, model = "logit", data=d1)
table(d1$a1, d1$info_source)
summary(d1$volume)
volume <- c(4.852, 6.661)  #from third quartile to first
ma1X <-setx(ma1, volume = volume)  # Simulate quantities of interest
ma1sim <- sim(ma1, x = ma1X)  # Extract expected values from simulations
df = zelig_qi_to_df(ma1sim)
head(df)
dim(df)
?sim
?pnorm
?quantile
quantile(df$expected_value[df$volume==6.661]/df$expected_value[df$volume==4.852], probs=c(.05, .95))
lo_vol = mean(df$expected_value[df$volume==4.852])
hi_vol = mean(df$expected_value[df$volume==6.661])
hi_vol/lo_vol
mean(hi_vol)-mean(lo_vol)
quantile(hi_vol-lo_vol, probs=c(.05, .95))
quantile((hi_vol-lo_vol), probs=c(.05, .95))
install.packages("bigint")
install.packages("int64")
options(digits=99)
options(digits=22)
mean(hi_vol)/mean(lo_vol)
quantile(hi_vol/lo_vol, probs=c(.05, .95))
lo_vol = df$expected_value[df$volume==4.852]
hi_vol = df$expected_value[df$volume==6.661]
mean(hi_vol)/mean(lo_vol)
quantile(hi_vol/lo_vol, probs=c(.05, .95))
mean(hi_vol)-mean(lo_vol)
quantile((hi_vol-lo_vol), probs=c(.05, .95))
?options
options(digits=7)
set.seed(765)
summary(d1$volume)
volume <- c(4.852, 6.661)  #from third quartile to first
ma1X <-setx(ma1, volume = volume)  # Simulate quantities of interest
ma1sim <- sim(ma1, x = ma1X)  # Extract expected values from simulations
df = zelig_qi_to_df(ma1sim)
lo_vol = df$expected_value[df$volume==4.852]
hi_vol = df$expected_value[df$volume==6.661]
mean(hi_vol)/mean(lo_vol)
quantile(hi_vol/lo_vol, probs=c(.05, .95))
mean(hi_vol)-mean(lo_vol)
quantile((hi_vol-lo_vol), probs=c(.05, .95))
median((hi_vol-lo_vol))
summary((hi_vol-lo_vol))
?irlba
library(irlba)
install.packages("irlba")
18*20
df = read.csv("~/Downloads/boa_trs.csv")
head(df$Date)
df$Date = as.Date(as.character(df$Date))
df$Date = as.Date(as.character(df$Date), format = "%m/%d/%y")
head(df$Date)
df$month = month(df$Date)
library(lubridate)
df$month = month(df$Date)
library(dplyr)
df$year = year(df$Date)
df %>% group_by(month, year) %>% summarise(sum(Amount))
this = df %>% group_by(year, month) %>% summarise(sum(Amount))
View(this)
600+1200
qplot(this$`sum(Amount)`)
library(ggplot2)
qplot(this$`sum(Amount)`)
qplot(this$month, this$`sum(Amount)`)
qplot(this$year, this$`sum(Amount)`)
this = df %>% filter(transaction=="debit") %>% group_by(year, month) %>% summarise(sum(Amount))
names(df)
this = df %>% filter(Transaction.Type=="debit") %>% group_by(year, month) %>% summarise(sum(Amount))
this
View(this)
View(this)
View(df)
1500 + 4000
2863+1000
3863 + 350
4213*.15
631.95*2
(4213*2)-1263.9
7162.1 + (1450*2)
(3213*2)-1263.9
5162 +  (1450*2)
(2863*2) - 1263
4463 + (1450*2)
7363 - 1600 - 4000
1763-244
1519-50-60
4463/(4463 + (1450*2))
180/(180+100)
442000*.05
442000*.03
df = read.csv("~/Downloads/boa_trs.csv")
df$month = month(as.Date(as.character(df$Date, format = "%m/%d/%y")))
df$month = month(as.Date(as.character(df$Date), format = "%m/%d/%y"))
df$Date = as.Date(as.character(df$Date), format = "%m/%d/%y")
df$year = year(df$Date)
this = df %>% filter(Transaction.Type=="debit") %>% group_by(year, month) %>% summarise(total = sum(Amount))
this
qplot(data = this, x=month, y=total, col=year)
qplot(data = this, x=month, y=total, col=as.factor(year))
qplot(data = this, x=as.factor(month), y=total, col=as.factor(year))
qplot(data = this, x=as.factor(month), y=total, col=as.factor(year), geom="line")
qplot(data = this, x=as.factor(month), y=total, col=as.factor(year), geom="abline")
qplot(data = this, x=as.factor(month), y=total, col=as.factor(year), geom="point")
qplot(data = this, x=as.factor(month), y=total, col=as.factor(year)) + geom_line()
qplot(data = this, x=as.factor(month), y=total, group=as.factor(year)) + geom_line()
qplot(data = this, x=as.factor(month), y=total, group=as.factor(year), col=as.factor(year)) + geom_line()
3.75*24
.1*1700
State = "NY"
getwd()
setwd("~/Documents/ms_flu/Forecasting")
Yr <- read.csv(paste("Data/",State,"_normalized.csv",sep=""),header = T, stringsAsFactors = F)
View(Yr)
Z <- data.frame(read.csv("Data/NYFlu.csv" , header = TRUE,stringsAsFactors = FALSE))
Z
View(Z)
as.Date(Z$Week.Ending , format="%m/%d/%Y")
class(Z$Week.Ending)
NYdates = as.Date(Z$Week.Ending , format="%m/%d/%Y")
State = "NM"
Z <- data.frame(read.csv("Data/DE-NM-MI-DCFlu-2.csv" , header = TRUE,stringsAsFactors = FALSE)) # States
ind <- which(Z$State == State)
View(Z)
Z <- Z[ind,]
Z <- Z[start:nrow(Z),]
start
NMdates = as.Date(Z$Week.Ending , format="%m/%d/%Y")
NMdaes
NMdates
tail(NYdates)
tail(NYdates, 32)
tail(NMdates, 32)
T2 <- 32*3
start <- 1
StateFile <- "Data/NYRaw.csv"
